pragma language_version 0.15;

import CompactStandardLibrary;

export ledger round: Counter;
export ledger votesA: Counter;
export ledger votesB: Counter;
export ledger items: Set<Bytes<32>>;

export circuit increment(): [] {
  round.increment(1);
}

export circuit vote_for(index: Uint<8>): [] {

  // make sure it has not been voted for before
  const secret_key = "123";
  const instance = "000";
 

  assert !items.member(public_key_vote(secret_key, instance)) "Already voted";

  items.insert(public_key_vote(secret_key, instance));

  if (index == 0) {
    items.insert(public_key_vote(secret_key, instance));
    votesA.increment(1);
  } else if (index == 1) {
    items.insert(public_key_vote(secret_key, instance));
    votesB.increment(1);
  }
}

export circuit get_vote_count(index: Uint<8>): Uint<64> {
  if (index == 0) {
    return votesA;
  } else if (index == 1) {
    return votesB;
  } else {
    return 0;
  }
}

export circuit public_key_vote(sk: Bytes<3>, instance: Bytes<3>): Bytes<32> {
    return persistent_hash<Vector<3, Bytes<3>>>([pad(3, "pk:"), instance, sk]);
}